service: serverless-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

package:
  individually: true

provider:
  tracing: true

  name: aws
  runtime: nodejs16.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    CAMERAS_TABLE: Cameras-${self:provider.stage}
    CAMERAS_TABLE_INDEX_NAME: UserIdIndex
    IMAGES_S3_BUCKET: test-dev-serverless-app-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_JWKS_URL: https://dev-68hkuh2i.us.auth0.com/.well-known/jwks.json

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCameras:
    handler: src/lambda/cameras/getCameras.handler
    events:
      - http:
          method: get
          path: cameras
          authorizer: Auth
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}/index/${self:provider.environment.CAMERAS_TABLE_INDEX_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}
      - Effect: Allow
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  CreateCamera:
    handler: src/lambda/cameras/createCamera.handler
    events:
      - http:
          method: post
          path: cameras
          authorizer: Auth
          cors: true
          request:
            schemas:
              application/json: ${file(./schema/camera-request-param.json)}

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}/index/${self:provider.environment.CAMERAS_TABLE_INDEX_NAME}
      - Effect: Allow
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  UpdateCamera:
    handler: src/lambda/cameras/updateCamera.handler
    events:
      - http:
          method: put
          path: cameras/{cameraId}
          authorizer: Auth
          cors: true
          request:
            schemas:
              application/json: ${file(schema/camera-request-param.json)}

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}/index/${self:provider.environment.CAMERAS_TABLE_INDEX_NAME}
      - Effect: Allow
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  DeleteCamera:
    handler: src/lambda/cameras/deleteCamera.handler
    events:
      - http:
          method: delete
          path: cameras/{cameraId}
          authorizer: Auth
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}/index/${self:provider.environment.CAMERAS_TABLE_INDEX_NAME}
      - Effect: Allow
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/cameras/generateUploadUrl.handler
    events:
      - http:
          method: get
          path: cameras/{cameraId}/image-url
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CAMERAS_TABLE}
      - Effect: Allow
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    CamerasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: cameraId
            AttributeType: S
        KeySchema:
          - AttributeName: cameraId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CAMERAS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CAMERAS_TABLE_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: publicReadObjects
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref S3Bucket
